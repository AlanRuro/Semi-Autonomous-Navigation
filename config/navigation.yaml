# behavior_server:
#   ros__parameters:
#     local_costmap_topic: local_costmap/costmap_raw
#     local_footprint_topic: local_costmap/published_footprint
#     global_costmap_topic: global_costmap/costmap_raw
#     global_footprint_topic: global_costmap/published_footprint
#     cycle_frequency: 5.0
#     behavior_plugins:
#       ["spin", "backup", "drive_on_heading", "wait", "assisted_teleop"]
#     spin:
#       plugin: "nav2_behaviors/Spin"
#     backup:
#       plugin: "nav2_behaviors/BackUp"
#     drive_on_heading:
#       plugin: "nav2_behaviors/DriveOnHeading"
#     wait:
#       plugin: "nav2_behaviors/Wait"
#     assisted_teleop:
#       plugin: "nav2_behaviors/AssistedTeleop"
#     local_frame: odom
#     global_frame: map
#     robot_base_frame:  base_link
#     transform_timeout: 0.6 #0.1
#     simulate_ahead_time: 2.0
#     max_rotational_vel: 0.8 #1.0
#     min_rotational_vel: 0.02 #0.4
#     rotational_acc_lim: 0.5 #3.2

bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom #odometry/filtered
    default_bt_xml_filename: "navigate_w_replanning_and_recovery.xml"
    bt_loop_duration: 10
    default_server_timeout: 20
    enable_groot_monitoring: True
    groot_zmq_publisher_port: 1666
    groot_zmq_server_port: 1667
    # navigators: [navigate_to_pose, navigate_through_poses]
    # navigate_to_pose:
    #   plugin: nav2_bt_navigator/NavigateToPoseNavigator
    # navigate_through_poses:
    #   plugin: nav2_bt_navigator/NavigateThroughPosesNavigator
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      # - nav2_compute_path_to_pose_action_bt_node
      # - nav2_compute_path_through_poses_action_bt_node
      # - nav2_smooth_path_action_bt_node
      # - nav2_follow_path_action_bt_node
      # - nav2_spin_action_bt_node
      # - nav2_wait_action_bt_node
      # - nav2_assisted_teleop_action_bt_node
      # - nav2_back_up_action_bt_node
      # - nav2_drive_on_heading_bt_node
      # - nav2_clear_costmap_service_bt_node
      # - nav2_is_stuck_condition_bt_node
      # - nav2_goal_reached_condition_bt_node
      # - nav2_goal_updated_condition_bt_node
      # - nav2_globally_updated_goal_condition_bt_node
      # - nav2_is_path_valid_condition_bt_node
      # - nav2_initial_pose_received_condition_bt_node
      # - nav2_reinitialize_global_localization_service_bt_node
      # - nav2_rate_controller_bt_node
      # - nav2_distance_controller_bt_node
      # - nav2_speed_controller_bt_node
      # - nav2_truncate_path_action_bt_node
      # - nav2_truncate_path_local_action_bt_node
      # - nav2_goal_updater_node_bt_node
      # - nav2_recovery_node_bt_node
      # - nav2_pipeline_sequence_bt_node
      # - nav2_round_robin_node_bt_node
      # - nav2_transform_available_condition_bt_node
      # - nav2_time_expired_condition_bt_node
      # - nav2_path_expiring_timer_condition
      # - nav2_distance_traveled_condition_bt_node
      # - nav2_single_trigger_bt_node
      # - nav2_goal_updated_controller_bt_node
      # - nav2_is_battery_low_condition_bt_node
      # - nav2_navigate_through_poses_action_bt_node
      # - nav2_navigate_to_pose_action_bt_node
      # - nav2_remove_passed_goals_action_bt_node
      # - nav2_planner_selector_bt_node
      # - nav2_controller_selector_bt_node
      # - nav2_goal_checker_selector_bt_node
      # - nav2_controller_cancel_bt_node
      # - nav2_path_longer_on_approach_bt_node
      # - nav2_wait_cancel_bt_node
      # - nav2_spin_cancel_bt_node
      # - nav2_back_up_cancel_bt_node
      # - nav2_assisted_teleop_cancel_bt_node
      # - nav2_drive_on_heading_cancel_bt_node
      # - nav2_is_battery_charging_condition_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    use_sim_time: False
    controller_frequency: 10.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.02 #0.5
      movement_time_allowance: 10.0
    # Goal checker parameters
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.05 #0.25
      yaw_goal_tolerance: 0.2 #0.25
  
    # FollowPath:

    #   plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"

    #   # Velocity/accelaration limits also have to be adjusted in the velocity smoother
    #   desired_linear_vel: 0.1 #0.4
    #   lookahead_dist: 0.2 #0.6
    #   min_lookahead_dist: 0.1 #0.4
    #   max_lookahead_dist: 0.3 #0.9
    #   lookahead_time: 0.5 #2.0
    #   transform_tolerance:  1.0 #0.1
    #   use_velocity_scaled_lookahead_dist: true
    #   min_approach_linear_velocity: 0.02 #0.1
    #   approach_velocity_scaling_dist: 0.1 #0.5
    #   use_collision_detection: true
    #   max_allowed_time_to_collision_up_to_carrot: 0.8 #1.0

    #   use_regulated_linear_velocity_scaling: true # Whether to use the regulated features for path curvature (e.g. slow on high curvature paths).
    #   use_cost_regulated_linear_velocity_scaling: false # Whether to use the regulated features for proximity to obstacles (e.g. slow in close proximity to obstacles).

    #   regulated_linear_scaling_min_radius: 0.6 #0.9
    #   regulated_linear_scaling_min_speed: 0.1
    #   allow_reversing: true #false
    #   use_rotate_to_heading: false
    #   rotate_to_heading_min_angle: 0.785
    #   # it is only used when rotating to heading (use_rotate_to_heading)
    #   # for some reason rotate_to_heading_angular_vel is ignored and robot rotates with
    #   # max_angular_accel/10. angular velocity (that's why it is set to higher value)
    #   max_angular_accel: 2.0 #5.0
    #   rotate_to_heading_angular_vel: 0.5 #1.8
    #   max_robot_pose_search_dist: 0.5 #10.0
    #   use_interpolation: true

    # DWB parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      min_vel_x: -0.07 #0.0
      min_vel_y: 0.0
      max_vel_x: 0.07 #0.22
      max_vel_y: 0.0
      max_vel_theta: 0.4 #1.0
      min_speed_xy: 0.0
      max_speed_xy: 0.07 #0.22
      min_speed_theta: -0.4 #0.0
      # Add high threshold velocity for turtlebot 3 issue.
      # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      acc_lim_x: 1.5 #2.5
      acc_lim_y: 0.0
      acc_lim_theta: 1.5 #3.2
      decel_lim_x: -1.5 #-2.5
      decel_lim_y: 0.0
      decel_lim_theta: -1.5 #-3.2
      vx_samples: 20
      vy_samples: 0
      vtheta_samples: 40
      sim_time: 1.5
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.05
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      stateful: True
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0
    

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

local_costmap:
  local_costmap:
    ros__parameters:
      use_sim_time: False

      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: map #odom
      robot_base_frame: base_link

      width: 3
      height: 3
      resolution: 0.03
      rolling_window: True
      always_send_full_costmap: True

      robot_radius: 0.1 #0.23
      # footprint: "[[0.17, 0.17], [0.17, -0.17], [-0.17, -0.17], [-0.17, 0.17]]"
      # footprint_padding: 0.03

      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: True
        inflation_radius: 0.09 #0.75
        cost_scaling_factor: 3.0
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan #/scan_filtered
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        enabled: True
        map_subscribe_transient_local: True

  local_costmap_client:
    ros__parameters:
      use_sim_time: False
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

global_costmap:
  global_costmap:
    ros__parameters:
      use_sim_time: False

      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link

      resolution: 0.03 #0.05
      always_send_full_costmap: True
      track_unknown_space: True

      robot_radius: 0.1 #0.23
      # footprint: "[[0.17, 0.17], [0.17, -0.17], [-0.17, -0.17], [-0.17, 0.17]]"
      # footprint_padding: 0.03

      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: True
        inflation_radius: 0.09 #0.75
        cost_scaling_factor: 3.0
        # inflate_unknown: false #extra
        # inflate_around_unknown: true #extra
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan #/scan_filtered
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        enabled: True
        map_subscribe_transient_local: True

  global_costmap_client:
    ros__parameters:
      use_sim_time: False
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

planner_server:
  ros__parameters:
    use_sim_time: False
    expected_planner_frequency: 20.0
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.4 #0.5
      use_astar: false
      allow_unknown: true

# planner_server:
#   ros__parameters:
#     planner_plugins: ["GridBased"]
#     use_sim_time: False

#     GridBased:
#       plugin: "nav2_smac_planner/SmacPlannerHybrid" # In Iron and older versions, "/" was used instead of "::"
#       downsample_costmap: false           # whether or not to downsample the map
#       downsampling_factor: 1              # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
#       tolerance: 0.25                     # dist-to-goal heuristic cost (distance) for valid tolerance endpoints if exact goal cannot be found.
#       allow_unknown: true                 # allow traveling in unknown space
#       max_iterations: 1000000             # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
#       max_on_approach_iterations: 1000    # Maximum number of iterations after within tolerances to continue to try to find exact solution
#       max_planning_time: 5.0              # max time in s for planner to plan, smooth
#       motion_model_for_search: "DUBIN"    # Hybrid-A* Dubin, Redds-Shepp
#       angle_quantization_bins: 72         # Number of angle bins for search
#       analytic_expansion_ratio: 3.5       # The ratio to attempt analytic expansions during search for final approach.
#       analytic_expansion_max_length: 3.0  # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting
#       analytic_expansion_max_cost: 200.0  # The maximum single cost for any part of an analytic expansion to contain and be valid, except when necessary on approach to goal
#       analytic_expansion_max_cost_override: false  #  Whether or not to override the maximum cost setting if within critical distance to goal (ie probably required)
#       minimum_turning_radius: 0.40        # minimum turning radius in m of path / vehicle
#       reverse_penalty: 2.0                # Penalty to apply if motion is reversing, must be => 1
#       change_penalty: 0.0                 # Penalty to apply if motion is changing directions (L to R), must be >= 0
#       non_straight_penalty: 1.2           # Penalty to apply if motion is non-straight, must be => 1
#       cost_penalty: 2.0                   # Penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
#       retrospective_penalty: 0.015
#       lookup_table_size: 20.0             # Size of the dubin/reeds-sheep distance window to cache, in meters.
#       cache_obstacle_heuristic: false     # Cache the obstacle map dynamic programming distance expansion heuristic between subsequent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.
#       debug_visualizations: true         # For Hybrid nodes: Whether to publish expansions on the /expansions topic as an array of poses (the orientation has no meaning) and the path's footprints on the /planned_footprints topic. WARNING: heavy to compute and to display, for debug only as it degrades the performance.
#       use_quadratic_cost_penalty: False
#       downsample_obstacle_heuristic: True
#       allow_primitive_interpolation: False
#       smooth_path: True                   # If true, does a simple and quick smoothing post-processing to the path

#       smoother:
#         max_iterations: 1000
#         w_smooth: 0.3
#         w_data: 0.2
#         tolerance: 1.0e-10
#         do_refinement: true
#         refinement_num: 2

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

# smoother_server:
#   ros__parameters:
#     use_sim_time: False

waypoint_follower:
  ros__parameters:
    use_sim_time: False
    loop_rate: 2000 #20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

recoveries_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    recovery_plugins: ["spin", "backup", "wait"]
    spin:
      plugin: "nav2_recoveries/Spin"
    backup:
      plugin: "nav2_recoveries/BackUp"
    wait:
      plugin: "nav2_recoveries/Wait"
    global_frame: odom
    robot_base_frame: base_link
    transform_timeout: 0.1
    use_sim_time: False
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 2.0 #3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: False

# velocity_smoother:
#   ros__parameters:
#     use_sim_time: False

#     smoothing_frequency: 5.0
#     scale_velocities: False
#     feedback: "CLOSED_LOOP"
#     max_velocity: [0.05, 0.0, 0.3] #[0.5, 0.0, 1.5]
#     min_velocity: [-0.05, 0.0, -0.3] #[-0.5, 0.0, -1.5]
#     max_accel: [0.5, 0.0, 0.5] #[1.5, 0.0, 3.0]
#     max_decel: [-0.5, 0.0, -0.5] #[-1.5, 0.0, -3.0]
#     # used in the CLOSED_LOOP feedback mode
#     odom_topic: "odom"
#     odom_duration: 0.1
#     deadband_velocity: [0.0, 0.0, 0.0]
#     velocity_timeout: 1.0